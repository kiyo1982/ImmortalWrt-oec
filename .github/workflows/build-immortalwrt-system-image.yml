name: Build ImmortalWrt System Image

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 5 * * *

env:
  OPENWRT_BOARD: "a311d-oes_wxy-oect"
  FEEDS_CONF: config/immortalwrt/feeds.conf.default
  CONFIG_FILE: config/immortalwrt/config
  DIY_P1_SH: config/immortalwrt/diy-part1.sh
  DIY_P2_SH: config/immortalwrt/diy-part2.sh
  TZ: Asia/Shanghai
  PLATFORM: "rockchip" 

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main-repo

      - name: Upload build script
        run: |
          mkdir -p scripts
          cp main-repo/build-openwrt.sh scripts/
          chmod +x scripts/build-openwrt.sh

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null || true
          sudo swapoff -a || true
          sudo rm -f /swapfile /mnt/swapfile || true
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile} || true
          sudo rm -rf ~/{.cargo,.dotnet,.rustup} || true
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create virtual disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner:runner /builder
          df -Th

      - name: Clone ImmortalWrt source
        id: codes
        working-directory: /builder
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/immortalwrt/immortalwrt/tags" | grep -oP '"name": "\K[^"]+' | head -n 1)
          [[ -z "$LATEST_TAG" ]] && { echo "::error::Failed to get latest tag"; exit 1; }
          REPO_URL="https://github.com/immortalwrt/immortalwrt"
          FINAL_TAGS_NAME="immortalwrt_${LATEST_TAG}"
          git clone -b ${LATEST_TAG} --single-branch --filter=blob:none ${REPO_URL} openwrt
          ln -sf /builder/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${FINAL_TAGS_NAME}_$(date +"%Y.%m.%d-%H%M")" >> ${GITHUB_OUTPUT}
          echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          echo "TAGS_NAME=${FINAL_TAGS_NAME}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -hT ${PWD}

      - name: Apply custom configuration
        run: |
          cd openwrt/
          [[ -f "${GITHUB_WORKSPACE}/${FEEDS_CONF}" ]] && cp -f ${GITHUB_WORKSPACE}/${FEEDS_CONF} feeds.conf.default
          chmod +x ${GITHUB_WORKSPACE}/${DIY_P1_SH}
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update and install feeds
        run: |
          cd openwrt/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load final configuration
        run: |
          cd openwrt/
          [[ -d "${GITHUB_WORKSPACE}/files" ]] && cp -rf ${GITHUB_WORKSPACE}/files .
          [[ -e "${GITHUB_WORKSPACE}/${CONFIG_FILE}" ]] && cp -f ${GITHUB_WORKSPACE}/${CONFIG_FILE} .config
          chmod +x ${GITHUB_WORKSPACE}/${DIY_P2_SH}
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download packages
        run: |
          cd openwrt/
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \; || true

      - name: Compile OpenWrt
        id: compile
        run: |
          cd openwrt/
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Prepare for image building
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir -p output
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          echo "${{ env.PLATFORM }}" > output/platform.txt
          cp -f .config output/config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Build firmware image
        id: build-image
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          mkdir -p openwrt-armsr
          cp openwrt/output/*rootfs.tar.gz openwrt-armsr/
          cp openwrt/output/platform.txt openwrt-armsr/

          ./scripts/build-openwrt.sh
          
          mkdir -p openwrt/output/firmware
          mv openwrt/out/*.gz openwrt/output/firmware/
          mv openwrt/out/*.info openwrt/output/firmware/
          
          echo "FIRMWARE_FILE=$(ls openwrt/output/firmware/*.img.gz)" >> $GITHUB_OUTPUT
          echo "BUILDER_NAME=$FORCE_BUILDER_NAME" >> $GITHUB_OUTPUT
          echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ steps.build-image.outputs.FIRMWARE_FILE }} != '' && !cancelled()
        with:
          name: openwrt-artifacts
          path: |
            openwrt/output/firmware/*.gz
            openwrt/output/firmware/*.info
            openwrt/output/config
          retention-days: 3

      - name: Create release
        id: create-release
        uses: softprops/action-gh-release@v1
        if: ${{ steps.build-image.outputs.FIRMWARE_FILE }} != '' && !cancelled()
        with:
          tag_name: ${{ steps.codes.outputs.build_tag }}
          name: ImmortalWrt ${{ steps.codes.outputs.TAGS_NAME }}
          body: |
            ### Firmware Information
            - **Board**: ${{ env.OPENWRT_BOARD }}
            - **Platform**: ${{ env.PLATFORM }}
            - **Builder**: ${{ steps.build-image.outputs.BUILDER_NAME }}
            - **Source**: [${{ steps.codes.outputs.TAGS_NAME }}](${{ steps.codes.outputs.REPO_URL }})
            - **Default IP**: DHCP
            - **Default Password**: password
            
            ### Flashing Instructions
            1. Extract the downloaded firmware archive
            2. Write the `.img.gz` file to USB using tools like Rufus or BalenaEtcher
            3. Boot device from USB
            4. Login to OpenWrt (IP: DHCP, User: root, Password: password)
            5. Use Amlogic toolbox to install to eMMC
            
            ### Partition Layout
            - Boot: ${{ env.BOOT_SIZE || '512' }}MB (${{ env.BOOT_FS || 'ext4' }})
            - Root: ${{ env.ROOT_SIZE || '2048' }}MB (btrfs)
          files: |
            openwrt/output/firmware/*.gz
            openwrt/output/firmware/*.info
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        if: ${{ steps.create-release.conclusion }} == 'success'
        with:
          keep_latest: 2
          delete_tag_pattern: "OpenWrt_*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 2
